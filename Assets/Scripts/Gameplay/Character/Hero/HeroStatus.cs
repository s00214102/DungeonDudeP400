using UnityEngine;

[RequireComponent(typeof(HeroKnowledge))]
[RequireComponent(typeof(Health))]
public class HeroStatus : MonoBehaviour
{
    private int maxFear = 100;
    [SerializeField] private int fear;
    public int Fear { get => fear; }
    private float healthFear; // fear value based on missing health
    [SerializeField] private int fearDecay = 1;
    private HeroKnowledge knowledge;
    private Health health;

    private void Start()
    {
        InvokeRepeating("FearDecay", 1, 0.5f);
    }
    private void Awake()
    {
        knowledge = GetComponent<HeroKnowledge>();
        health = GetComponent<Health>();
    }
    private void Update() {
        float healthPercentage = health.CurrentHealth / health.MaxHealth;
        // fear generated by losing health
        // Use linear interpolation to map health percentage to healthFear range (0 to 50)
        healthFear = Mathf.Lerp(0f, 50f, healthPercentage);

    }
    public void AddFear(int value)
    {
        fear += value;
        if (fear > maxFear)
            fear = maxFear;
    }
    public void ReduceFear(int value)
    {
        fear -= value;
        if (fear < 0)
            fear = 0;
    }
    private void FearDecay()
    {
        fear -= fearDecay;
        if (fear < 0)
            fear = 0;
    }
}